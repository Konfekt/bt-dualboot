#!/usr/bin/env bash

#
# @param ONLY_ENV=
# @param -w|--watch
# @param --shell
# @params for pytest
# @params for ptw
# @params for pytest-snapshot: --snapshot-update
#

PROJECT_DIR=$(pwd)

shopt -s globstar nullglob dotglob

[ ! -z "$ONLY_ENV" ] && echo "! ENV filter: $ONLY_ENV"

for env_launcher in ./**/env_*/start; do
  env_dir=$(dirname $env_launcher)
  env_name=$(basename $env_dir)
  launch_tests_cmd="$env_launcher $@"

  if [ ! -z "$ONLY_ENV" ] && [ "$ONLY_ENV" != "$env_name" ]; then
    echo ". skip $env_dir"
    continue
  fi

  echo "## Testing: $env_dir..."

  if [ -e "$env_dir/Dockerfile" ]; then
    echo -n "> docker build..."
    image_id=$(docker build -q \
      --build-arg ARG_PYTHON_VERSION=$(cat $PROJECT_DIR/.python-version) \
      --build-arg ARG_USER=$(id -u --name) \
      --build-arg ARG_UID=$(id -u) \
      -f $env_dir/Dockerfile $PROJECT_DIR \
    )
    echo " done ($image_id)"

    echo "> docker run..."
    docker run --rm \
      --mount type=bind,source="$PROJECT_DIR",target=/src \
      --workdir /src \
      --env PYTEST_LAUNCHER_VIRTUAL_ENV=1 \
      -it $image_id /bin/bash -lc "$launch_tests_cmd"

  else
    echo "! No Dockerfile for $env_dir"
    echo "> start locally"
    $env_launcher $@
  fi

done
